filetype plugin on

set nocompatible        " Use vim, no vi defaults
set number              " Show line numbers
set numberwidth=5       " minimal number of columns for line numbers
set ruler               " Show line and column number
set autoread            " Auto reload file changed outside of vim
set nobackup
set noswapfile
set laststatus=2        " Nice statusbar

set hlsearch            " highlight matches
set incsearch           " incremental searching
set ignorecase          " searches are case insensitive...
set smartcase           " ... unless they contain at least one capital letter
set completeopt=menu,menuone,preview

set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1

set background=dark

set encoding=utf-8      " Set default encoding to UTF-8
set path=$PWD/**
set sh=/bin/zsh         " Set shell for shell commands from within vim
syntax enable           " Turn on syntax highlighting allowing local overrides

let mapleader = ","     " change mapleader

filetype off            " required!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  Plugins                                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

"===> essential -----------------------------------------------------
" Plug 'scrooloose/nerdtree'
Plug 'nvim-tree/nvim-web-devicons' " optional, for file icons
Plug 'nvim-tree/nvim-tree.lua'
Plug 'junegunn/fzf', { 'dir': '~/.vim/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'            " plugin for ack and also ag (silver searcher)
Plug 'dense-analysis/ale'                   " asynchronous lint engine
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-snippets'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'jlanzarotta/bufexplorer'

"===> autocomplete / snippets  --------------------------------------
"Plugin 'valloric/YouCompleteMe'
Plug 'townk/vim-autoclose'
Plug 'alvan/vim-closetag'
Plug 'nathanaelkane/vim-indent-guides'
"Plug 'epilande/vim-es2015-snippets'
"Plug 'epilande/vim-react-snippets'
"Plug 'SirVer/ultisnips'

"===> html / css ----------------------------------------------------
" Plugin 'kogakure/vim-sparkup'       " zencoding
"Plugin 'cakebaker/scss-syntax.vim'  " scss syntax

"===> javascript  ---------------------------------------------------
Plug 'pangloss/vim-javascript'      " js syntax
" Plug 'yuezk/vim-js'                   " js syntax
Plug 'leafgarland/typescript-vim'   " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'     " react jsx syntax
" Plug 'herringtondarkholme/yats.vim'   "typescript syntax
" Plug 'moll/vim-node'

"===> rust ----------------------------------------------------------
Plug 'rust-lang/rust.vim'

"===> php -----------------------------------------------------------
"Plugin 'StanAngeloff/php.vim'       " php syntax
"Plugin 'xsbeats/vim-blade'          " laravel php template syntax

"===> misc ----------------------------------------------------------
"Plug 'henrik/vim-indexed-search'  " displays number matches in searches
" Plug 'altercation/vim-colors-solarized'
Plug 'crusoexia/vim-monokai'
Plug 'taniarascia/new-moon.vim'
Plug 'rakr/vim-one'
" Plug 'morhetz/gruvbox'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'embear/vim-localvimrc'
Plug 'junegunn/goyo.vim'
Plug 'reedes/vim-pencil'
Plug 'tpope/vim-markdown'

" vim-scripts repos
"Plug 'ZoomWin'
" Plug 'vimwiki'

" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"   let g:deoplete#enable_at_startup = 1
"   " deoplete tab-complete
"   inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" endif

" Initialize plugin system
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              Plugin Settings                               "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"===> nerdtree ------------------------------------------------------
" map <leader>n :NERDTreeToggle<CR>       " Default mapping, <leader>n
" let NERDTreeShowHidden=1                " show hidden files, too
" let NERDTreeQuitOnOpen=1                " Quit on opening files from the tree
" let NERDTreeHighlightCursorline=1       " highlight the selected entry in the tree
" let NERDTreeMouseMode=3                 " use a single click for everything
" let NERDTreeChDirMode=2                 " automatically CWD to root node
" let NERDTreeIgnore=[ '^\.git$','^\.svn$','^\.DS_Store$','^\.[\w\.]+\.swp$' ]
" let g:NERDTreeDirArrows=0               " don't display fancy arrows

"===> nvim-tree ------------------------------------------------------

lua << EOF
  vim.g.loaded_netrw = 1
  vim.g.loaded_netrwPlugin = 1

  -- set termguicolors to enable highlight groups
  vim.opt.termguicolors = true

  -- empty setup using defaults
  require("nvim-tree").setup({
    actions = {
      open_file = { quit_on_open = true }
    },
    git = {
      ignore = true,
    },
    view = {
      adaptive_size = true,
      mappings = {
        list = {
          { key = "u", action = "dir_up" },
          { key = "p", action = "parent_node" },
          { key = "v", action = "paste" },
        },
      },
    },
    renderer = {
      group_empty = true,
    },
    filters = {
      custom = { ".git", ".vscode" },
    },
  })
EOF

map <leader>n :NvimTreeToggle<CR>       " Default mapping, <leader>n

"===> fzf -----------------------------------------------------------
nmap <Leader>f :Files<CR>

"===> ack -----------------------------------------------------------

" function wrapper for :Ack command in order to prevent leaking results
" to terminal (see https://github.com/mileszs/ack.vim/issues/18)
function Ag(string) abort
  let saved_shellpipe = &shellpipe
  let &shellpipe = '>'
  try
    execute 'Ack!' shellescape(a:string, 1)
  finally
    let &shellpipe = saved_shellpipe
  endtry
endfunction

nmap <Leader>a :call Ag("")<left><left>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"===> ale -----------------------------------------------------------
let g:ale_set_loclist = 0           " disable loclist
let g:ale_set_quickfix = 1          " enable quickfix list
let g:ale_open_list = 1             " show list
let g:ale_lint_on_enter = 0         " don't lint right after opening
let g:ale_lint_on_text_changed = 'never'  " only lint on save
" let g:ale_completion_enabled = 1
" let g:ale_completion_autoimport = 1
" let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = ''

let g:ale_linters = {
      \'javascript': ['eslint'],
      \'typescript': ['eslint', 'tsserver'],
      \}
let g:ale_fixers = {
      \'javascript': ['prettier'],
      \'typescript': ['prettier'],
      \}
" let g:ale_fixers = {'javascript': ['eslint']}
" let g:ale_fixers = {
"       \   '*': ['remove_trailing_lines', 'trim_whitespace'],
"       \   'javascript': ['eslint'],
"       \   'typescript': ['eslint','tslint', 'xo'],
"       \   'css': ['stylelint', 'fecs'],
"       \   'rust': ['rustfmt', 'rls'],
"       \}

" inoremap <silent><expr> <Tab>
"       \ pumvisible() ? "\<C-n>" : "\<TAB>"

" nmap <silent> <F11> <Plug>(ale_previous_wrap)
" nmap <silent> <F23> <Plug>(ale_next_wrap)
" nmap <silent> <F12> :ALEGoToDefinition<CR>
" nmap <silent> <F24> :ALEFindReferences<CR>

"===> coc -----------------------------------------------------------

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

let g:coc_global_extensions = [
  \ 'coc-tsserver'
  \ ]

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" set float window background for monokai scheme
" hi CocFloating ctermbg=239 guibg=#64645e

"===> vim-indent-guides ---------------------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black   ctermbg=black

" for monokai
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333333 ctermbg=black

" for 'one' dark
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#2d313a ctermbg=black

" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#282828 ctermbg=black
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#1d2021 ctermbg=black

"===> commentary.vim ------------------------------------------------
map ä :Commentary<CR>

"===> gruvbox -------------------------------------------------------

let g:gruvbox_contrast_dark = "hard"

"===> vim-surround --------------------------------------------------
"xmap s <Plug>VSurround                  " Fuck tpope (vim-surround)

" Better surround
"let g:surround_40 = "(\r)"
"let g:surround_91 = "[\r]"
"let g:surround_60 = "<\r>"

"===> ultisnips -----------------------------------------------------
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" let g:UltiSnipsJumpForwardTrigger="<C-j>"
" let g:UltiSnipsJumpBackwardTrigger="<C-k>"

"===> vim-jsx -------------------------------------------------------
" let g:jsx_ext_required = 0              " Allow JSX in normal JS files

"===> powerline -----------------------------------------------------
set guifont=Droid\ Sans\ Mono\ for\ Powerline:h14
let g:airline_powerline_fonts = 1
" let g:airline_solarized_bg='dark'
let g:airline_theme='minimalist'
" let g:Powerline_symbols = 'fancy'
" set fillchars+=stl:\ ,stlnc:\
" let g:airline#extensions#ale#enabled = 1  " enable 'ale' integration

"===> localvimrc ----------------------------------------------------
let g:localvimrc_persistent=2

"===> goyo ----------------------------------------------------------
" function! s:goyo_enter()
"   silent !tmux set status off
"   silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
"   set spell noci nosi noai nolist noshowmode noshowcmd
"   set complete+=s
"   set bg=light
"   set wrap
"   if !has('gui_running')
"     let g:solarized_termcolors=256
"   endif
"   colors solarized
" endfunction

" function! s:goyo_leave()
"   silent !tmux set status on
"   silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
"   set showmode
"   set showcmd
"   set scrolloff=5
"   set nowrap
"   set bg=dark
" endfunction

" autocmd! User GoyoEnter nested call <SID>goyo_enter()
" autocmd! User GoyoLeave nested call <SID>goyo_leave()
let g:goyo_width = 90

"===> zoomwin -------------------------------------------------------
map <Leader>zz :ZoomWin<CR>


"===> journal
autocmd VimEnter *.jrnl $pu=strftime('%n# %a, %d.%m.%Y %T%n%n')
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END

"===> vim-one -------------------------------------------------------
let g:airline_theme='one'
let g:one_allow_italics = 1

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 File Types                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Additional file type setup
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead *.jrnl set filetype=markdown
au BufNewFile,BufRead *.hogan set filetype=html
au BufNewFile,BufRead *.blade.php set filetype=html.blade
au BufNewFile,BufRead *.css set fdm=marker fmr={,}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Whitespace                                 "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
" set smartindent
" set autoindent
" filetype indent on              " load indent file for the current filetype

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Wild Settings                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" TODO: Investigate the precise meaning of these settings
" set wildmode=list:longest,list:full
set wildmode=longest,list:longest

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Key Mappings                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" convenient esc
map! jj <ESC>

" map search / to 'ö'
map ö /
"
" clear search highlights
noremap <Leader><space> :nohls<CR>

" map capital W to lower case - I ofter accidentally tiggered capital W
command! W :w

" go back to last buffer
map gb <C-^>

" imap <Tab> <C-P>
" add ALT+j / ALT+k to move lines down / up (in visual mode)
" nnoremap <A-j> :m+<CR>==
" nnoremap <A-k> :m-2<CR>==
" inoremap <A-j> <Esc>:m+<CR>==gi
" inoremap <A-k> <Esc>:m-2<CR>==gi
" vnoremap <A-j> :m'>+<CR>gv=gv
" vnoremap <A-k> :m-2<CR>gv=gv

" easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" jump to matching pairs easily, with tab
nnoremap <Tab> %
vnoremap <Tab> %

" reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" add svn blame shortcut for selected text
vmap gl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<")

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle Background Color
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

fun! s:toggleColor()
  if &background ==# 'light'
    echo 'set Dark!'
    " then, set to dark
    highlight IndentGuidesEven guibg=#2d313a ctermbg=black
    set background=dark
  else
    echo 'set Light!'
    " else, set to light
    set background=light
    highlight IndentGuidesEven guibg=#f2f2f2 ctermbg=black
  endif
endfun
command ToggleColor call s:toggleColor()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use Node.js for JavaScript interpretation
let $JS_CMD='node'

" save buffer position when switching
if v:version >= 700
  au BufLeave * let b:winview = winsaveview()
  au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
endif

" set termguicolors
" set term=xterm-256color

" colorscheme monokai
colorscheme one
" colorscheme new-moon
" colorscheme gruvbox

